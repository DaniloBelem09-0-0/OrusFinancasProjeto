@page "/cadastro"
@rendermode InteractiveWebAssembly
@using OrusFinancas.Data
@inject HttpClient Http
@inject NavigationManager NavManager

<!-- Container Principal: Centralizado e responsivo (RNF01) -->
<div class="min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
    <div class="sm:mx-auto sm:w-full sm:max-w-md">
        <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
            Criar sua conta no Orus Finanças
        </h2>
        <p class="mt-2 text-center text-sm text-gray-600">
            Gerencie suas finanças de forma simples e segura.
        </p>
    </div>
   
    <div class="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
        <div class="bg-white py-8 px-4 shadow-lg rounded-xl sm:px-10 border border-gray-200">
            
            <!-- Formulário Blazor usando EditForm para validação -->
            <EditForm Model="@cadastroModel" OnValidSubmit="@HandleSubmitCadastro" FormName="CadastroForm">
                <DataAnnotationsValidator />
                
                <!-- Nome -->
                <div>
                    <label for="nome" class="block text-sm font-medium text-gray-700">Nome Completo</label>
                    <div class="mt-1">
                        <InputText id="nome" @bind-Value="cadastroModel.Nome" required
                                   class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" />
                        <ValidationMessage For="@(() => cadastroModel.Nome)" class="text-xs text-red-600" />
                    </div>
                </div>

                <!-- Email -->
                <div class="mt-4">
                    <label for="email" class="block text-sm font-medium text-gray-700">Endereço de Email</label>
                    <div class="mt-1">
                        <InputText type="email" id="email" @bind-Value="cadastroModel.Email" required
                                   class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" />
                        <ValidationMessage For="@(() => cadastroModel.Email)" class="text-xs text-red-600" />
                    </div>
                </div>

                <!-- Senha -->
                <div class="mt-4">
                    <label for="senha" class="block text-sm font-medium text-gray-700">Senha</label>
                    <div class="mt-1">
                        <!-- Nota: O InputText não tem tipo "password", usamos InputText e estilização (RNF03) -->
                        <InputText type="password" id="senha" @bind-Value="cadastroModel.Senha" required
                                   class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" />
                        <ValidationMessage For="@(() => cadastroModel.Senha)" class="text-xs text-red-600" />
                    </div>
                </div>

                <!-- Exibição de Mensagens (Sucesso/Erro) -->
                @if (!string.IsNullOrEmpty(mensagem))
                {
                    <div class="mt-4 p-3 rounded-md text-sm @(isSuccess ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800")" role="alert">
                        @mensagem
                    </div>
                }

                <!-- Botão de Cadastro -->
                <div class="mt-6">
                    <button type="submit" disabled="@isLoading"
                            class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 transition duration-150 ease-in-out">
                        @if (isLoading)
                        {
                            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                        }
                        else
                        {
                            <span>Cadastrar</span>
                        }
                    </button>
                </div>
            </EditForm>
            
            <!-- Link para Login -->
            <div class="mt-6 text-center">
                <a href="/login" class="font-medium text-indigo-600 hover:text-indigo-500">
                    Já tem uma conta? Faça login
                </a>
            </div>

        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm] // Usado para Blazor Web App com formulários SSR
    private CadastroRequest cadastroModel { get; set; } = new CadastroRequest();
    
    private bool isLoading = false;
    private bool isSuccess = false;
    private string mensagem = string.Empty;

    // Garante que os componentes de formulário sejam carregados
    protected override void OnInitialized()
    {
        // Necessário para usar DataAnnotationsValidator e Input components
        base.OnInitialized();
    }

    private async Task HandleSubmitCadastro()
    {
        isLoading = true;
        isSuccess = false;
        mensagem = string.Empty;

        try
        {
            // RNF02: Chamada assíncrona para o Controller API
            var response = await Http.PostAsJsonAsync("api/Auth/cadastro", cadastroModel);
            var authResponse = await response.Content.ReadFromJsonAsync<AuthResponse>();

            if (response.IsSuccessStatusCode && authResponse != null && authResponse.Sucesso)
            {
                isSuccess = true;
                mensagem = authResponse.Mensagem ?? "Cadastro realizado com sucesso! Redirecionando para login...";
                
                // Redireciona após 3 segundos
                await Task.Delay(3000);
                NavManager.NavigateTo("/login");
            }
            else
            {
                isSuccess = false;
                // Exibir erro detalhado do backend, se disponível
                mensagem = authResponse?.Mensagem ?? "Falha no cadastro. Tente novamente.";
            }
        }
        catch (Exception ex)
        {
            isSuccess = false;
            mensagem = $"Erro de conexão: {ex.Message}. Verifique se a API está rodando.";
            Console.WriteLine(mensagem);
        }
        finally
        {
            isLoading = false;
        }
    }
}
